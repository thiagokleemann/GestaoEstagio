{"ast":null,"code":"import { ref } from \"vue\";\nimport axios from \"axios\";\n\n// 1. O prop 'multiple' não é mais necessário, então foi removido.\n\n// 2. O estado agora armazena um único arquivo (ou null), em vez de um array.\n\nexport default {\n  __name: 'UploadBox',\n  emits: [\"changed\"],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n    const file = ref(null);\n    const type = ref(2);\n    const isLoading = ref(false);\n    const emit = __emit;\n    function handleFileSelect(e) {\n      const input = e.target;\n      // 3. Pegamos apenas o primeiro arquivo da lista (índice 0).\n      const selectedFile = input?.files[0];\n      if (selectedFile) {\n        file.value = selectedFile;\n        emit(\"changed\", file.value);\n      }\n    }\n\n    // 4. A função de remoção agora simplesmente limpa o estado.\n    function removeFile() {\n      file.value = null;\n      emit(\"changed\", null);\n    }\n    async function handleUpload() {\n      // A verificação agora é se 'file.value' existe.\n      if (!file.value) {\n        alert(\"Por favor, selecione um arquivo.\");\n        return;\n      }\n      const formData = new FormData();\n\n      // 5. Adicionamos o único arquivo ao FormData.\n      //    É uma boa prática usar uma chave no singular ('documento') se é apenas um arquivo.\n      //    Verifique se seu backend espera 'documento' ou 'documentos'.\n      formData.append(\"documento\", file.value);\n      formData.append(\"tipo\", type.value);\n      isLoading.value = true;\n      try {\n        const response = await axios.post(\"/aluno/documento\", formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          }\n        });\n        console.log(\"Arquivo enviado com sucesso:\", response.data);\n        alert(\"Arquivo enviado com sucesso!\");\n        file.value = null; // Limpa o arquivo após o envio\n        emit(\"changed\", null);\n      } catch (error) {\n        console.error(\"Erro ao enviar o arquivo:\", error);\n        alert(\"Ocorreu um erro ao enviar o arquivo. Tente novamente.\");\n      } finally {\n        isLoading.value = false;\n      }\n    }\n    const __returned__ = {\n      file,\n      type,\n      isLoading,\n      emit,\n      handleFileSelect,\n      removeFile,\n      handleUpload,\n      ref,\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","axios","file","type","isLoading","emit","__emit","handleFileSelect","e","input","target","selectedFile","files","value","removeFile","handleUpload","alert","formData","FormData","append","response","post","headers","console","log","data","error"],"sources":["C:/Users/THIAGO/Documents/Estágios/sce-front/src/components/UI/UploadBox.vue"],"sourcesContent":["<script setup>\r\n\timport { ref, defineEmits } from \"vue\";\r\n\timport axios from \"axios\";\r\n\r\n\t// 1. O prop 'multiple' não é mais necessário, então foi removido.\r\n\r\n\t// 2. O estado agora armazena um único arquivo (ou null), em vez de um array.\r\n\tconst file = ref(null);\r\n\tconst type = ref(2);\r\n\tconst isLoading = ref(false);\r\n\r\n\tconst emit = defineEmits([\"changed\"]);\r\n\r\n\tfunction handleFileSelect(e) {\r\n\t\tconst input = e.target;\r\n\t\t// 3. Pegamos apenas o primeiro arquivo da lista (índice 0).\r\n\t\tconst selectedFile = input?.files[0];\r\n\t\tif (selectedFile) {\r\n\t\t\tfile.value = selectedFile;\r\n\t\t\temit(\"changed\", file.value);\r\n\t\t}\r\n\t}\r\n\r\n\t// 4. A função de remoção agora simplesmente limpa o estado.\r\n\tfunction removeFile() {\r\n\t\tfile.value = null;\r\n\t\temit(\"changed\", null);\r\n\t}\r\n\r\n\tasync function handleUpload() {\r\n\t\t// A verificação agora é se 'file.value' existe.\r\n\t\tif (!file.value) {\r\n\t\t\talert(\"Por favor, selecione um arquivo.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst formData = new FormData();\r\n\r\n\t\t// 5. Adicionamos o único arquivo ao FormData.\r\n\t\t//    É uma boa prática usar uma chave no singular ('documento') se é apenas um arquivo.\r\n\t\t//    Verifique se seu backend espera 'documento' ou 'documentos'.\r\n\t\tformData.append(\"documento\", file.value);\r\n\t\tformData.append(\"tipo\", type.value);\r\n\r\n\t\tisLoading.value = true;\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await axios.post(\"/aluno/documento\", formData, {\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"multipart/form-data\",\r\n\t\t\t\t},\r\n\t\t\t});\r\n\r\n\t\t\tconsole.log(\"Arquivo enviado com sucesso:\", response.data);\r\n\t\t\talert(\"Arquivo enviado com sucesso!\");\r\n\t\t\tfile.value = null; // Limpa o arquivo após o envio\r\n\t\t\temit(\"changed\", null);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"Erro ao enviar o arquivo:\", error);\r\n\t\t\talert(\"Ocorreu um erro ao enviar o arquivo. Tente novamente.\");\r\n\t\t} finally {\r\n\t\t\tisLoading.value = false;\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<template>\r\n\t<div>\r\n\t\t<label\r\n\t\t\tfor=\"file-input\"\r\n\t\t\tclass=\"btn btn-primary\"\r\n\t\t\t>Adicionar Envio</label\r\n\t\t>\r\n\t\t<input\r\n\t\t\tid=\"file-input\"\r\n\t\t\ttype=\"file\"\r\n\t\t\t@change=\"handleFileSelect\"\r\n\t\t\thidden\r\n\t\t\tref=\"fileInput\"\r\n\t\t/>\r\n\r\n\t\t<div\r\n\t\t\tv-if=\"file\"\r\n\t\t\tclass=\"file-info\"\r\n\t\t>\r\n\t\t\t<span>{{ file.name }}</span>\r\n\t\t\t<button\r\n\t\t\t\t@click=\"removeFile\"\r\n\t\t\t\t:disabled=\"isLoading\"\r\n\t\t\t\ttitle=\"Remover\"\r\n\t\t\t>\r\n\t\t\t\t&times;\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t\t<p v-else>Nenhum arquivo selecionado.</p>\r\n\r\n\t\t<button\r\n\t\t\tv-if=\"file\"\r\n\t\t\t@click=\"handleUpload\"\r\n\t\t\tclass=\"btn btn-success\"\r\n\t\t\t:disabled=\"isLoading\"\r\n\t\t>\r\n\t\t\t{{ isLoading ? \"Enviando...\" : \"Enviar Arquivo\" }}\r\n\t\t</button>\r\n\t</div>\r\n</template>\r\n\r\n<style scoped>\r\n\t/* Estilos podem ser mantidos ou ajustados */\r\n\t.btn {\r\n\t\tpadding: 8px 12px;\r\n\t\tborder: none;\r\n\t\tborder-radius: 4px;\r\n\t\tcursor: pointer;\r\n\t\tmargin-right: 10px;\r\n\t}\r\n\t.btn-primary {\r\n\t\tbackground-color: #007bff;\r\n\t\tcolor: white;\r\n\t}\r\n\t.btn-success {\r\n\t\tbackground-color: #28a745;\r\n\t\tcolor: white;\r\n\t\tmargin-top: 10px;\r\n\t}\r\n\t.file-info {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-between;\r\n\t\talign-items: center;\r\n\t\tpadding: 8px;\r\n\t\tborder: 1px solid #ccc;\r\n\t\tborder-radius: 4px;\r\n\t\tmargin-top: 15px;\r\n\t}\r\n\t.file-info button {\r\n\t\tbackground: none;\r\n\t\tborder: none;\r\n\t\tfont-size: 1.2rem;\r\n\t\tcolor: red;\r\n\t\tfont-weight: bold;\r\n\t\tcursor: pointer;\r\n\t}\r\n</style>\r\n"],"mappings":"AACC,SAASA,GAAgB,QAAQ,KAAK;AACtC,OAAOC,KAAK,MAAM,OAAO;;AAEzB;;AAEA;;;;;;;;;;IACA,MAAMC,IAAI,GAAGF,GAAG,CAAC,IAAI,CAAC;IACtB,MAAMG,IAAI,GAAGH,GAAG,CAAC,CAAC,CAAC;IACnB,MAAMI,SAAS,GAAGJ,GAAG,CAAC,KAAK,CAAC;IAE5B,MAAMK,IAAI,GAAGC,MAAwB;IAErC,SAASC,gBAAgBA,CAACC,CAAC,EAAE;MAC5B,MAAMC,KAAK,GAAGD,CAAC,CAACE,MAAM;MACtB;MACA,MAAMC,YAAY,GAAGF,KAAK,EAAEG,KAAK,CAAC,CAAC,CAAC;MACpC,IAAID,YAAY,EAAE;QACjBT,IAAI,CAACW,KAAK,GAAGF,YAAY;QACzBN,IAAI,CAAC,SAAS,EAAEH,IAAI,CAACW,KAAK,CAAC;MAC5B;IACD;;IAEA;IACA,SAASC,UAAUA,CAAA,EAAG;MACrBZ,IAAI,CAACW,KAAK,GAAG,IAAI;MACjBR,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC;IACtB;IAEA,eAAeU,YAAYA,CAAA,EAAG;MAC7B;MACA,IAAI,CAACb,IAAI,CAACW,KAAK,EAAE;QAChBG,KAAK,CAAC,kCAAkC,CAAC;QACzC;MACD;MAEA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;;MAE/B;MACA;MACA;MACAD,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAEjB,IAAI,CAACW,KAAK,CAAC;MACxCI,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEhB,IAAI,CAACU,KAAK,CAAC;MAEnCT,SAAS,CAACS,KAAK,GAAG,IAAI;MAEtB,IAAI;QACH,MAAMO,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,IAAI,CAAC,kBAAkB,EAAEJ,QAAQ,EAAE;UAC/DK,OAAO,EAAE;YACR,cAAc,EAAE;UACjB;QACD,CAAC,CAAC;QAEFC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEJ,QAAQ,CAACK,IAAI,CAAC;QAC1DT,KAAK,CAAC,8BAA8B,CAAC;QACrCd,IAAI,CAACW,KAAK,GAAG,IAAI,CAAC,CAAC;QACnBR,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC;MACtB,CAAC,CAAC,OAAOqB,KAAK,EAAE;QACfH,OAAO,CAACG,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjDV,KAAK,CAAC,uDAAuD,CAAC;MAC/D,CAAC,SAAS;QACTZ,SAAS,CAACS,KAAK,GAAG,KAAK;MACxB;IACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}